# -*- coding: utf-8 -*-
"""BitcoinForecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-mqdj544e0Wqn5AtSKnQPwJQVU2KFhij
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import datetime

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

from keras import models, layers

# Read the data to dataframe
df = pd.read_csv('https://raw.githubusercontent.com/jerichols/MLTerapan/main/BTC-USD.csv')
df

# droping null value because there is NaN
df= df.dropna()

# Only use close and date
df = df[[ 'Date', 'Close']] # I only use close and date feature
df

# Set date as index
df.loc[:, 'Date'] = pd.to_datetime(df['Date']) # Change it to datetime
df = df.set_index(['Date'])

# Show the bitcoin graph
plt.figure(figsize=(20,10))
plt.plot(df)
plt.title('Bitcoin price',fontsize=20)
plt.xlabel('year',fontsize=15)
plt.ylabel('price',fontsize=15)
plt.show()

# Scale the data
scaler = MinMaxScaler()
price = scaler.fit_transform(np.array(df['Close']).reshape(-1,1))
df['Close'] = price

# Initialize empty lists to store features and labels
X_l = []
y_l = []

N = len(df)
D = 50
# Iterate over the dataframe to create feature-label pairs
for i in range(N-D-1):
    X_l.append(df.iloc[i:i+D])
    y_l.append(df.iloc[i+D])

# Convert the lists to numpy arrays
X = np.array(X_l)
y = np.array(y_l)

print(X.shape, y.shape)

# Split Data
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state= 100)

# Make the model
m_x = layers.Input(shape = X_train.shape[1:])
m_h = layers.LSTM(10)(m_x)
m_y = layers.Dense(1)(m_h)
m = models.Model(m_x,m_y)
m.compile('adam','mse')
m.summary()

# Train the model using the training data (X_train and y_train)
history = m.fit(X_train, y_train, epochs=500, validation_data=(X_test, y_test),verbose=0)

# Create a new figure with a specified size
plt.figure(figsize=(15, 5))

# Plot the training loss history
plt.plot(history.history['loss'])

# Plot the validation loss history
plt.plot(history.history['val_loss'])

# Add a legend to differentiate between training and validation loss
plt.legend(['Train', 'Test'])

# Set the title of the plot
plt.title("Model's Evaluation", fontsize=14)

plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show()

# Print out the final training and validation loss
final_train_loss = history.history['loss'][-1]
final_val_loss = history.history['val_loss'][-1]

print(f"Final Training Loss: {final_train_loss:.4f}")
print(f"Final Validation Loss: {final_val_loss:.4f}")

# Initialize an empty list to store predictions
pred = []

# Predict the next value using the last 50 values from the dataframe
pr = m.predict(np.array(df[-50:]))
pred.append(pr[0])

# Iteratively predict the next 49 values using a sliding window approach
for i in range(1, 50):
    # Concatenate the most recent 50 values with the previously predicted values
    pr = m.predict(np.concatenate((np.array(df[-50+i:]), pred[:]), axis=0))
    # Append the new prediction to the list
    pred.append(pr[0])

# Predict 250 more values, extending the predictions iteratively
for i in range(0, 250):
    # Concatenate the predictions from the current list and reshape
    pr = m.predict(np.concatenate(pred[i:], axis=0).reshape(-1, 1))
    # Append the new prediction to the list
    pred.append(pr[0])

# Convert 'pred' into a DataFrame and reset the index
pred = pd.DataFrame(pred)
pred = pred.reset_index()

# Rename columns for clarity
pred.columns = ['z', 'price']

# Drop the 'z' column as it's no longer needed
pred.drop(['z'], axis=1, inplace=True)

# Concatenate the original data (after resetting the index and dropping 'Date') with the predictions
data = pd.concat([df.reset_index().drop('Date', axis=1), pred], ignore_index=True)

# Plotting the data
plt.figure(figsize=(17, 7))
# Plot the last 1300 to 300 entries of the data
plt.plot(data[-1300:-300])
plt.title("Bitcoin Prediction", fontsize=20)
# Add annotation for the predicted data
plt.text(3800, 1, "Predicted Data", fontsize=14)
plt.text(3630, 1, "- 2024-08-06", fontsize=14)
# Plot the last 300 entries of the data
plt.plot(data[-300:])
plt.show()